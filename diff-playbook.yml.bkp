---
- hosts: localhost
  become: true
  tasks:
    - name: Check if the path of first run and second run are passed
      fail:
        msg: "first_run and second_run should be passed using --extra-vars"
      when: first_run is not defined or second_run is not defined

    - name: Convert paths into absolute paths
      set_fact:
        first_run_abs: "{{ first_run|realpath }}"
        second_run_abs: "{{ second_run|realpath }}"
    
    - name: List all files in first_run
      find:
        paths: "{{ first_run_abs }}"
        recurse: true
        hidden: true
      register: first_list
    
    - name: List all files in second_run
      find:
        paths: "{{ second_run_abs }}"
        recurse: true
        hidden: true
      register: second_list

    - name: Initialize the dictionaries from the first run
      set_fact:
        files_stat: "{{ files_stat | default({}) | combine(new_item, recursive=true) }}"
      vars:
        item_pre:
          - key: "{{ item.path[first_run_abs|length + 1:] }}"
            value:
              before:
                owner_read: "{{ item.rusr }}"
                owner_write: "{{ item.wusr }}"
                owner_exec: "{{ item.xusr }}"
                group_read: "{{ item.rgrp }}"
                group_write: "{{ item.wgrp }}"
                group_exec: "{{ item.xgrp }}"
                others_read: "{{ item.roth }}"
                others_write: "{{ item.woth }}"
                others_exec: "{{ item.xoth }}"
                owner_id: "{{ item.uid }}"
                owner_name: "{{ item.pw_name }}"
                group_id: "{{ item.gid }}"
                group_name: "{{ item.gr_name }}"
        new_item: "{{ item_pre | items2dict }}"
      with_items: "{{ first_list.files }}"

    - name: Initialize the dictionaries from the second run
      set_fact:
        files_stat: "{{ files_stat | default({}) | combine(new_item, recursive=true) }}"
      vars:
        item_pre:
          - key: "{{ item.path[second_run_abs|length + 1:] }}"
            value:
              after:
                owner_read: "{{ item.rusr }}"
                owner_write: "{{ item.wusr }}"
                owner_exec: "{{ item.xusr }}"
                group_read: "{{ item.rgrp }}"
                group_write: "{{ item.wgrp }}"
                group_exec: "{{ item.xgrp }}"
                others_read: "{{ item.roth }}"
                others_write: "{{ item.woth }}"
                others_exec: "{{ item.xoth }}"
                owner_id: "{{ item.uid }}"
                owner_name: "{{ item.pw_name }}"
                group_id: "{{ item.gid }}"
                group_name: "{{ item.gr_name }}"
        new_item: "{{ item_pre | items2dict }}"
      with_items: "{{ second_list.files }}"

    - name: Find the difference in stats
      set_fact:
        stats_diff: "{{ stats_diff | default({}) | combine(new_item, recursive=true) }}"
      vars:
        item_pre:
          - key: "{{ item }}"
            value: 
              stat_diff: |
                {% set stat_d = [] -%}
                {% for k in files_stat[item]['before'].keys() -%}
                  {% if files_stat[item]['before'][k] != files_stat[item]['after'][k] -%}
                    {% set dummy = stat_d.append(' '.join([k, ':', files_stat[item]['before'][k]|string, '->', files_stat[item]['after'][k]|string])) -%}
                  {%- endif %}
                {%- endfor %}
                {{ stat_d }}
        new_item: "{{ item_pre | items2dict }}"
      with_items: "{{ files_stat.keys() }}"

    - name: Find the difference between two runs
      shell: "git diff --no-index {{ first_run_abs }}/{{ item }} {{ second_run_abs }}/{{ item }}"
      with_items: "{{ stats_diff.keys() }}"
      register: diff_dict
      # If difference found it returns non-zero so errors
      # must be ignored since errors are just differences
      ignore_errors: true
    
    - name: Reindexing the difference dictionary
      set_fact:
        new_diff: "{{ new_diff | default({}) | combine(new_item, recursive=true) }}"
      vars:
        item_pre:
          - key: "{{ item.item }}"
            value:
              context_diff: "{{ item.stdout }}"
        new_item: "{{ item_pre | items2dict }}"
      with_items: "{{ diff_dict.results }}"
    
    - name: Combine differences
      set_fact:
        diff_list: "{{ stats_diff | default({}) | combine(new_diff, recursive=true) }}"

    - debug:
        var: diff_list